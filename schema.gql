# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CONSOLES {
  console: String!
  console_type: String!
  full_name: String!
  global_sales: Float
  maker: String!
  year_released: Int!
}

type CONSOLE_MAKERS {
  maker: String!
}

"""The columns that can be used to group the search by"""
enum Column {
  CONSOLE
  GENRE
  PUBLISHER
  RATING
  TITLE
  YEAR_OF_RELEASE
}

type ConsoleGameSales {
  console: String!
  eu_sales: Float!
  genre: String
  global_sales: Float!
  grouping: [String!]!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  year_of_release: Int
}

type CrossPlatformSales {
  console: String
  eu_sales: Float!
  genre: String
  global_sales: Float!
  grouping: [String!]!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  title: String!
  year_of_release: Int
}

type GamesWithGroupBy {
  console: console!
  critic_count: Int
  critic_score: Int
  developer: String
  eu_sales: Float!
  genre: genre!
  global_sales: Float!
  grouping: [String!]!
  id: Int!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String!
  rating: rating
  title: String!
  user_count: Int
  user_score: Int
  year_of_release: Int!
}

type GenreSales {
  console: String
  eu_sales: Float!
  genre: String!
  global_sales: Float!
  grouping: [String!]!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  year_of_release: Int
}

type OrderByColumn {
  column: OrderByColumns!
  order: SortOrder!
}

input OrderByColumnInput {
  column: OrderByColumns!
  order: SortOrder!
}

"""select columns to order results by"""
enum OrderByColumns {
  CONSOLE
  CRITIC_SCORE
  DEVELOPER
  EU_SALES
  GENRE
  GLOBAL_SALES
  JP_SALES
  NA_SALES
  OTHER_SALES
  PUBLISHER
  RATING
  TITLE
  USER_SCORE
  YEAR_OF_RELEASE
}

type PaginatedConsoleGameSales {
  groupedBy: [Column!]!
  hasMore: Boolean!
  orderedBy: [OrderByColumn!]!
  rows: [ConsoleGameSales!]!
}

type PaginatedCrossPlatformSales {
  groupedBy: [Column!]!
  hasMore: Boolean!
  orderedBy: [OrderByColumn!]!
  rows: [CrossPlatformSales!]!
}

type PaginatedGames {
  groupedBy: [Column!]!
  hasMore: Boolean!
  orderedBy: [OrderByColumn!]!
  rows: [GamesWithGroupBy!]!
}

type PaginatedGenreSales {
  groupedBy: [Column!]!
  hasMore: Boolean!
  orderedBy: [OrderByColumn!]!
  rows: [GenreSales!]!
}

type PaginatedPublisherSales {
  groupedBy: [Column!]!
  hasMore: Boolean!
  orderedBy: [OrderByColumn!]!
  rows: [PublisherSales!]!
}

input PaginatedQueryOptions {
  groupBy: [Column!]
  limit: Int!
  offset: Int!

  """
  if query uses group by columns, 
        then order by columns must be present 
        amongst group by options
  """
  orderBy: [OrderByColumnInput!]
  where: WhereOptions!
}

type PaginatedRatingSales {
  groupedBy: [Column!]!
  hasMore: Boolean!
  orderedBy: [OrderByColumn!]!
  rows: [RatingSales!]!
}

type PaginatedYearSales {
  groupedBy: [Column!]!
  hasMore: Boolean!
  orderedBy: [OrderByColumn!]!
  rows: [YearSales!]!
}

type PublisherSales {
  console: String
  eu_sales: Float!
  genre: String
  global_sales: Float!
  grouping: [String!]!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String!
  rating: String
  year_of_release: Int
}

type Query {
  consoleMakers: [CONSOLE_MAKERS!]!
  consoles: [CONSOLES!]!
  games(options: PaginatedQueryOptions!): PaginatedGames!
  highestCriticScores(options: PaginatedQueryOptions!): PaginatedGames!
  highestUserScores(options: PaginatedQueryOptions!): PaginatedGames!
  salesByConsole(options: PaginatedQueryOptions!): PaginatedConsoleGameSales!
  salesByCrossPlatformTitles(options: PaginatedQueryOptions!): PaginatedCrossPlatformSales!
  salesByGenre(options: PaginatedQueryOptions!): PaginatedGenreSales!
  salesByPublisher(options: PaginatedQueryOptions!): PaginatedPublisherSales!
  salesByRating(options: PaginatedQueryOptions!): PaginatedRatingSales!
  salesByTitles(options: PaginatedQueryOptions!): PaginatedGames!
  salesByYear(options: PaginatedQueryOptions!): PaginatedYearSales!
}

type RatingSales {
  console: String
  eu_sales: Float!
  genre: String
  global_sales: Float!
  grouping: [String!]!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  year_of_release: Int
}

"""select whether column should be sorted as ascending or descending"""
enum SortOrder {
  ASC
  DESC
}

input TextSearch {
  searchText: [String!]!
  searchType: textSearchType!
}

input WhereOptions {
  console: [console!]
  critic_score: [Int!]
  developer: [String!]
  eu_sales: [Float!]
  genre: [genre!]
  global_sales: [Float!]
  jp_sales: [Float!]
  na_sales: [Float!]
  other_sales: [Float!]
  publisher: [String!]
  rating: [rating!]
  title: TextSearch
  user_score: [Int!]
  year_of_release: [Int!]
}

type YearSales {
  console: String
  eu_sales: Float!
  genre: String
  global_sales: Float!
  grouping: [String!]!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  year_of_release: Int!
}

"""select games by different consoles"""
enum console {
  DC
  DS
  GB
  GBA
  GC
  GEN
  GG
  N64
  NES
  NG
  PC
  PCFX
  PS
  PS2
  PS3
  PS4
  PSP
  PSV
  SAT
  SCD
  SNES
  TG16
  WII
  WIIU
  WS
  X360
  XB
  XONE
  _3DO
  _3DS
  _2600
}

"""select games by different genres"""
enum genre {
  ACTION
  ADVENTURE
  FIGHTING
  MISC
  PLATFORM
  PUZZLE
  RACING
  ROLEPLAYING
  SHOOTER
  SIMULATION
  SPORTS
  STRATEGY
}

"""select games by different ratings"""
enum rating {
  AO
  E
  E10PLUS
  EC
  K_A
  M
  RP
  T
}

"""
distinguish between searching for exact text, text appearing at start, at end, or included anywhere
"""
enum textSearchType {
  CONTAINS
  ENDSWITH
  EQUALS
  STARTSWITH
}
