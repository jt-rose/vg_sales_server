# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CONSOLES {
  console: String!
  console_type: String!
  full_name: String!
  global_sales: Float
  maker: String!
  year_released: Int!
}

type CONSOLE_MAKERS {
  maker: String!
}

type ConsoleGameSales {
  console: String!
  eu_sales: Float!
  genre: String
  global_sales: Float!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  year_of_release: Int
}

type CrossPlatformSales {
  console: String
  eu_sales: Float!
  genre: String
  global_sales: Float!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  title: String!
  year_of_release: Int
}

type GAMES {
  console: String!
  critic_count: Int
  critic_score: Int
  developer: String
  eu_sales: Float!
  genre: String!
  global_sales: Float!
  id: Int!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String!
  rating: String
  title: String!
  user_count: Int
  user_score: Int
  year_of_release: Int!
}

type GenreSales {
  console: String
  eu_sales: Float!
  genre: String!
  global_sales: Float!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  year_of_release: Int
}

type PaginatedConsoleGameSales {
  hasMore: Boolean!
  rows: [ConsoleGameSales!]!
}

type PaginatedCrossPlatformSales {
  hasMore: Boolean!
  rows: [CrossPlatformSales!]!
}

type PaginatedGames {
  hasMore: Boolean!
  rows: [GAMES!]!
}

type PaginatedGenreSales {
  hasMore: Boolean!
  rows: [GenreSales!]!
}

type PaginatedPublisherSales {
  hasMore: Boolean!
  rows: [PublisherSales!]!
}

input PaginatedQueryOptions {
  groupBy: [String!]
  limit: Int!
  offset: Int!
  orderBy: [String!]
  where: WhereOptions!
}

type PaginatedRatingSales {
  hasMore: Boolean!
  rows: [RatingSales!]!
}

type PaginatedYearSales {
  hasMore: Boolean!
  rows: [YearSales!]!
}

type PublisherSales {
  console: String
  eu_sales: Float!
  genre: String
  global_sales: Float!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String!
  rating: String
  year_of_release: Int
}

type Query {
  consoleMakers: [CONSOLE_MAKERS!]!
  consoles: [CONSOLES!]!
  games(options: PaginatedQueryOptions!): PaginatedGames!
  highestCriticScores(options: PaginatedQueryOptions!): PaginatedGames!
  highestUserScores(options: PaginatedQueryOptions!): PaginatedGames!
  salesByConsole(options: PaginatedQueryOptions!): PaginatedConsoleGameSales!
  salesByCrossPlatformTitles(options: PaginatedQueryOptions!): PaginatedCrossPlatformSales!
  salesByGenre(options: PaginatedQueryOptions!): PaginatedGenreSales!
  salesByPublisher(options: PaginatedQueryOptions!): PaginatedPublisherSales!
  salesByRating(options: PaginatedQueryOptions!): PaginatedRatingSales!
  salesByTitles(options: PaginatedQueryOptions!): PaginatedGames!
  salesByYear(options: PaginatedQueryOptions!): PaginatedYearSales!
}

type RatingSales {
  console: String
  eu_sales: Float!
  genre: String
  global_sales: Float!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  year_of_release: Int
}

input WhereOptions {
  console: [String!]
  critic_score: [Int!]
  developer: [String!]
  eu_sales: [Float!]
  genre: [String!]
  global_sales: [Float!]
  jp_sales: [Float!]
  na_sales: [Float!]
  other_sales: [Float!]
  publisher: [String!]
  rating: [String!]
  title: [String!]
  titleContains: [String!]
  titleEndsWith: [String!]
  titleStartsWith: [String!]
  user_score: [Int!]
  year_of_release: [Int!]
}

type YearSales {
  console: String
  eu_sales: Float!
  genre: String
  global_sales: Float!
  jp_sales: Float!
  na_sales: Float!
  other_sales: Float!
  publisher: String
  rating: String
  year_of_release: Int!
}
